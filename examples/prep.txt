(dev) lucien@ubuntu:~/git/coco-alma/examples$ bash run_prep.sh 

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Gf6_sq_scl_mul_Canright_bit.vhd:46:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC);
           ^
Gf6_sq_scl_mul_Canright_bit.vhd:46:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC);
           ^
Gf6_sq_scl_mul_Canright_bit.vhd:43:27:warning: no assignment for port "x" [-Wnowrite]
                          x             : out  STD_LOGIC ;
                          ^
Gf6_sq_scl_mul_Canright_bit.vhd:44:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC ;
           ^
Gf6_sq_scl_mul_Canright_bit.vhd:45:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC ;
           ^
Gf6_sq_scl_mul_Canright_bit.vhd:43:27:warning: no assignment for port "x" [-Wnowrite]
                          x             : out  STD_LOGIC ;
                          ^
Gf6_sq_scl_mul_Canright_bit.vhd:44:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC ;
           ^
Gf6_sq_scl_mul_Canright_bit.vhd:45:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC);
           ^
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC);
           ^
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC ;
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC);
           ^
GF16_inv_282_bit.vhd:36:20:warning: no assignment for port "x" [-Wnowrite]
                   x            : out  STD_LOGIC ;
                   ^
GF16_inv_282_bit.vhd:36:20:warning: no assignment for port "x" [-Wnowrite]
                   x            : out  STD_LOGIC ;
                   ^
GF16_inv_282_bit.vhd:36:20:warning: no assignment for port "x" [-Wnowrite]
                   x            : out  STD_LOGIC ;
                   ^
Importing module GF256_INV.
Importing module reg_8.
Importing module gf6_sq_scl_mul_canright.
Importing module gf16_inv_282.
Importing module gf16_mul2_canright.
Importing module gf6_sq_scl_mul_canright_n.
Importing module reg_16.
Importing module gf6_sq_scl_mul_canright_l.
Importing module gf16_inv_282_n.
Importing module reg_32.
Importing module gf16_inv_282_l.
Importing module gf16_mul2_canright_n.
Importing module gf6_sq_scl_mul_canright_bit_1.
Importing module gf6_sq_scl_mul_canright_bit_2.
Importing module gf6_sq_scl_mul_canright_bit_3.
Importing module gf6_sq_scl_mul_canright_bit_4.
Importing module gf6_sq_scl_mul_canright_bit_5.
Importing module gf6_sq_scl_mul_canright_bit_6.
Importing module xor_2.
Importing module gf16_inv_282_bit_1.
Importing module gf16_inv_282_bit_2.
Importing module gf16_inv_282_bit_3.
Importing module gf16_inv_282_bit_4.
Importing module gf16_inv_282_bit_5.
Importing module gf16_inv_282_bit_6.
Importing module gf16_inv_282_bit_7.
Importing module gf16_inv_282_bit_8.
Importing module gf16_inv_282_bit_9.
Importing module gf16_inv_282_bit_10.
Importing module gf16_inv_282_bit_11.
Importing module xor_4.
Importing module gf16_mul2_canright_bit_1.
Importing module gf16_mul2_canright_bit_2.
Importing module gf16_mul2_canright_bit_3.
Importing module gf16_mul2_canright_bit_4.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \GF256_INV
Used module:     \gf16_mul2_canright
Used module:         \gf6_sq_scl_mul_canright_l
Used module:             \xor_2
Used module:         \reg_16
Used module:         \gf16_mul2_canright_n
Used module:             \gf16_mul2_canright_bit_4
Used module:             \gf16_mul2_canright_bit_3
Used module:             \gf16_mul2_canright_bit_2
Used module:             \gf16_mul2_canright_bit_1
Used module:     \reg_8
Used module:     \gf16_inv_282
Used module:         \gf16_inv_282_l
Used module:             \xor_4
Used module:         \reg_32
Used module:         \gf16_inv_282_n
Used module:             \gf16_inv_282_bit_11
Used module:             \gf16_inv_282_bit_10
Used module:             \gf16_inv_282_bit_9
Used module:             \gf16_inv_282_bit_8
Used module:             \gf16_inv_282_bit_7
Used module:             \gf16_inv_282_bit_6
Used module:             \gf16_inv_282_bit_5
Used module:             \gf16_inv_282_bit_4
Used module:             \gf16_inv_282_bit_3
Used module:             \gf16_inv_282_bit_2
Used module:             \gf16_inv_282_bit_1
Used module:     \gf6_sq_scl_mul_canright
Used module:         \gf6_sq_scl_mul_canright_n
Used module:             \gf6_sq_scl_mul_canright_bit_6
Used module:             \gf6_sq_scl_mul_canright_bit_5
Used module:             \gf6_sq_scl_mul_canright_bit_4
Used module:             \gf6_sq_scl_mul_canright_bit_3
Used module:             \gf6_sq_scl_mul_canright_bit_2
Used module:             \gf6_sq_scl_mul_canright_bit_1

2.1.2. Analyzing design hierarchy..
Top module:  \GF256_INV
Used module:     \gf16_mul2_canright
Used module:         \gf6_sq_scl_mul_canright_l
Used module:             \xor_2
Used module:         \reg_16
Used module:         \gf16_mul2_canright_n
Used module:             \gf16_mul2_canright_bit_4
Used module:             \gf16_mul2_canright_bit_3
Used module:             \gf16_mul2_canright_bit_2
Used module:             \gf16_mul2_canright_bit_1
Used module:     \reg_8
Used module:     \gf16_inv_282
Used module:         \gf16_inv_282_l
Used module:             \xor_4
Used module:         \reg_32
Used module:         \gf16_inv_282_n
Used module:             \gf16_inv_282_bit_11
Used module:             \gf16_inv_282_bit_10
Used module:             \gf16_inv_282_bit_9
Used module:             \gf16_inv_282_bit_8
Used module:             \gf16_inv_282_bit_7
Used module:             \gf16_inv_282_bit_6
Used module:             \gf16_inv_282_bit_5
Used module:             \gf16_inv_282_bit_4
Used module:             \gf16_inv_282_bit_3
Used module:             \gf16_inv_282_bit_2
Used module:             \gf16_inv_282_bit_1
Used module:     \gf6_sq_scl_mul_canright
Used module:         \gf6_sq_scl_mul_canright_n
Used module:             \gf6_sq_scl_mul_canright_bit_6
Used module:             \gf6_sq_scl_mul_canright_bit_5
Used module:             \gf6_sq_scl_mul_canright_bit_4
Used module:             \gf6_sq_scl_mul_canright_bit_3
Used module:             \gf6_sq_scl_mul_canright_bit_2
Used module:             \gf6_sq_scl_mul_canright_bit_1
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gf16_mul2_canright_bit_4.
Optimizing module gf16_mul2_canright_bit_3.
Optimizing module gf16_mul2_canright_bit_2.
Optimizing module gf16_mul2_canright_bit_1.
Optimizing module xor_4.
Optimizing module gf16_inv_282_bit_11.
Optimizing module gf16_inv_282_bit_10.
Optimizing module gf16_inv_282_bit_9.
Optimizing module gf16_inv_282_bit_8.
Optimizing module gf16_inv_282_bit_7.
Optimizing module gf16_inv_282_bit_6.
Optimizing module gf16_inv_282_bit_5.
Optimizing module gf16_inv_282_bit_4.
Optimizing module gf16_inv_282_bit_3.
Optimizing module gf16_inv_282_bit_2.
Optimizing module gf16_inv_282_bit_1.
Optimizing module xor_2.
Optimizing module gf6_sq_scl_mul_canright_bit_6.
Optimizing module gf6_sq_scl_mul_canright_bit_5.
Optimizing module gf6_sq_scl_mul_canright_bit_4.
Optimizing module gf6_sq_scl_mul_canright_bit_3.
Optimizing module gf6_sq_scl_mul_canright_bit_2.
Optimizing module gf6_sq_scl_mul_canright_bit_1.
<suppressed ~1 debug messages>
Optimizing module gf16_mul2_canright_n.
Optimizing module gf16_inv_282_l.
Optimizing module reg_32.
Optimizing module gf16_inv_282_n.
Optimizing module gf6_sq_scl_mul_canright_l.
Optimizing module reg_16.
Optimizing module gf6_sq_scl_mul_canright_n.
Optimizing module gf16_mul2_canright.
Optimizing module gf16_inv_282.
Optimizing module gf6_sq_scl_mul_canright.
Optimizing module reg_8.
Optimizing module GF256_INV.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module gf16_mul2_canright_bit_4.
Deleting now unused module gf16_mul2_canright_bit_3.
Deleting now unused module gf16_mul2_canright_bit_2.
Deleting now unused module gf16_mul2_canright_bit_1.
Deleting now unused module xor_4.
Deleting now unused module gf16_inv_282_bit_11.
Deleting now unused module gf16_inv_282_bit_10.
Deleting now unused module gf16_inv_282_bit_9.
Deleting now unused module gf16_inv_282_bit_8.
Deleting now unused module gf16_inv_282_bit_7.
Deleting now unused module gf16_inv_282_bit_6.
Deleting now unused module gf16_inv_282_bit_5.
Deleting now unused module gf16_inv_282_bit_4.
Deleting now unused module gf16_inv_282_bit_3.
Deleting now unused module gf16_inv_282_bit_2.
Deleting now unused module gf16_inv_282_bit_1.
Deleting now unused module xor_2.
Deleting now unused module gf6_sq_scl_mul_canright_bit_6.
Deleting now unused module gf6_sq_scl_mul_canright_bit_5.
Deleting now unused module gf6_sq_scl_mul_canright_bit_4.
Deleting now unused module gf6_sq_scl_mul_canright_bit_3.
Deleting now unused module gf6_sq_scl_mul_canright_bit_2.
Deleting now unused module gf6_sq_scl_mul_canright_bit_1.
Deleting now unused module gf16_mul2_canright_n.
Deleting now unused module gf16_inv_282_l.
Deleting now unused module reg_32.
Deleting now unused module gf16_inv_282_n.
Deleting now unused module gf6_sq_scl_mul_canright_l.
Deleting now unused module reg_16.
Deleting now unused module gf6_sq_scl_mul_canright_n.
Deleting now unused module gf16_mul2_canright.
Deleting now unused module gf16_inv_282.
Deleting now unused module gf6_sq_scl_mul_canright.
Deleting now unused module reg_8.
<suppressed ~60 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.
<suppressed ~24 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..
Removed 0 unused cells and 329 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module GF256_INV...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
<suppressed ~1077 debug messages>
Removed a total of 359 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..
Removed 0 unused cells and 359 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module GF256_INV:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~1005 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \GF256_INV

2.23.2. Analyzing design hierarchy..
Top module:  \GF256_INV
Removed 0 unused modules.

2.24. Printing statistics.

=== GF256_INV ===

   Number of wires:               1465
   Number of wire bits:           2547
   Number of public wires:         659
   Number of public wire bits:    1741
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1078
     $_AND_                        247
     $_DFF_P_                      160
     $_NOT_                          1
     $_XOR_                        670

2.25. Executing CHECK pass (checking for obvious problems).
Checking module GF256_INV...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\GF256_INV'.

6. Executing JSON backend.

End of script. Logfile hash: bad8b165de, CPU: user 0.78s system 0.09s, MEM: 33.98 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 23% 13x opt_expr (0 sec), 18% 13x opt_clean (0 sec), ...
| CircuitGraph | Total: 1101 | Linear:  670 | Non-linear:  247 | Registers:  160 | Mux:    0 | 
parse.py successful (0.03s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_1Fresh/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_1Fresh/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_1Fresh/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_1Fresh/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench

/home/lucien/git/coco-alma/examples/aes_sbox_1Fresh/verilator_tb.cpp:43:25: warning: unused variable 'Z' [-Wunused-variable]
    int X0, X1, Y0, Y1, Z;
                        ^
1 warning generated.

4: Simulating circuit and generating VCD
P: 8
Q: 6
p: 8
q: 6
OK. 



Starting yosys synthesis...
| CircuitGraph | Total: 1231 | Linear:  761 | Non-linear:  240 | Registers:  172 | Mux:    0 | 
parse.py successful (0.81s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_4Fresh/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_4Fresh/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_4Fresh/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_4Fresh/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 67
Y: a5
Q: a5
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
stage1.vhd:51:15:warning: attribute "keep_hierarchy" for architecture "Behavioral" of "stage1" is not kept in the netlist [-Wunkept-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage1.vhd:51:15:warning: unhandled attribute "keep_hierarchy" [-Wunhandled-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage2.vhd:79:15:warning: attribute "keep_hierarchy" for architecture "Behavioral" of "stage2" is not kept in the netlist [-Wunkept-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage2.vhd:79:15:warning: unhandled attribute "keep_hierarchy" [-Wunhandled-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage2.vhd:63:12:warning: no assignment for offsets 8:15 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage2.vhd:63:12:warning: no assignment for offsets 24:31 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage3.vhd:66:15:warning: attribute "keep_hierarchy" for architecture "Behavioral" of "stage3" is not kept in the netlist [-Wunkept-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage3.vhd:66:15:warning: unhandled attribute "keep_hierarchy" [-Wunhandled-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage3.vhd:63:12:warning: no assignment for offsets 4:15 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage3.vhd:63:12:warning: no assignment for offsets 20:31 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage4.vhd:68:15:warning: attribute "keep_hierarchy" for architecture "Behavioral" of "stage4" is not kept in the netlist [-Wunkept-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage4.vhd:68:15:warning: unhandled attribute "keep_hierarchy" [-Wunhandled-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage4.vhd:65:12:warning: no assignment for offsets 8:15 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage4.vhd:65:12:warning: no assignment for offsets 24:31 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage5.vhd:66:15:warning: attribute "keep_hierarchy" for architecture "Behavioral" of "stage5" is not kept in the netlist [-Wunkept-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage5.vhd:66:15:warning: unhandled attribute "keep_hierarchy" [-Wunhandled-attribute]
    attribute keep_hierarchy of Behavioral : architecture is "yes";    
              ^
stage5.vhd:63:12:warning: no assignment for offsets 16:31 of signal "chain"
    signal chain : chainTypeDim2;
           ^
stage5.vhd:63:12:warning: no assignment for offsets 48:63 of signal "chain"
    signal chain : chainTypeDim2;
           ^
Importing module sbox.
Importing module stage1_1.
Importing module stage2_1_b657b53d1fa82c6070e0757dc56164e0f38af54f.
Importing module stage3_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Importing module stage4_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Importing module stage5_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Importing module linear_map2_02da8ad445d583aa0b15e477bf78ce77640c028f.
Importing module linear_map2_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
Importing module square_scaler.
Importing module mul_gf2_4.
Importing module xorblock_4.
Importing module scale.
Importing module mul_gf2_2.
Importing module xorblock_2.
Importing module inverter.
Importing module xorblock_8.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \sbox
Used module:     \linear_map2_02da8ad445d583aa0b15e477bf78ce77640c028f
Used module:     \stage5_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_8
Used module:         \mul_gf2_4
Used module:     \stage4_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_4
Used module:         \mul_gf2_2
Used module:         \inverter
Used module:     \stage3_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_2
Used module:         \scale
Used module:     \stage2_1_b657b53d1fa82c6070e0757dc56164e0f38af54f
Used module:         \square_scaler
Used module:     \stage1_1
Used module:         \linear_map2_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0

2.1.2. Analyzing design hierarchy..
Top module:  \sbox
Used module:     \linear_map2_02da8ad445d583aa0b15e477bf78ce77640c028f
Used module:     \stage5_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_8
Used module:         \mul_gf2_4
Used module:     \stage4_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_4
Used module:         \mul_gf2_2
Used module:         \inverter
Used module:     \stage3_1_7390ccf61e010b87ee976731796fe7c2cff0f7de
Used module:         \xorblock_2
Used module:         \scale
Used module:     \stage2_1_b657b53d1fa82c6070e0757dc56164e0f38af54f
Used module:         \square_scaler
Used module:     \stage1_1
Used module:         \linear_map2_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xorblock_8.
Optimizing module inverter.
Optimizing module xorblock_2.
Optimizing module mul_gf2_2.
Optimizing module scale.
Optimizing module xorblock_4.
Optimizing module mul_gf2_4.
Optimizing module square_scaler.
Optimizing module linear_map2_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
<suppressed ~104 debug messages>
Optimizing module linear_map2_02da8ad445d583aa0b15e477bf78ce77640c028f.
<suppressed ~111 debug messages>
Optimizing module stage5_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Optimizing module stage4_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Optimizing module stage3_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Optimizing module stage2_1_b657b53d1fa82c6070e0757dc56164e0f38af54f.
Optimizing module stage1_1.
Optimizing module sbox.
<suppressed ~1 debug messages>

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module xorblock_8.
Deleting now unused module inverter.
Deleting now unused module xorblock_2.
Deleting now unused module mul_gf2_2.
Deleting now unused module scale.
Deleting now unused module xorblock_4.
Deleting now unused module mul_gf2_4.
Deleting now unused module square_scaler.
Deleting now unused module linear_map2_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
Deleting now unused module linear_map2_02da8ad445d583aa0b15e477bf78ce77640c028f.
Deleting now unused module stage5_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Deleting now unused module stage4_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Deleting now unused module stage3_1_7390ccf61e010b87ee976731796fe7c2cff0f7de.
Deleting now unused module stage2_1_b657b53d1fa82c6070e0757dc56164e0f38af54f.
Deleting now unused module stage1_1.
<suppressed ~47 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..
Removed 0 unused cells and 629 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module sbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
<suppressed ~666 debug messages>
Removed a total of 222 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..
Removed 0 unused cells and 222 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~530 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \sbox

2.23.2. Analyzing design hierarchy..
Top module:  \sbox
Removed 0 unused modules.

2.24. Printing statistics.

=== sbox ===

   Number of wires:                501
   Number of wire bits:           1927
   Number of public wires:         195
   Number of public wire bits:    1583
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                790
     $_AND_                        144
     $_DFF_P_                      176
     $_NOT_                          4
     $_XOR_                        466

2.25. Executing CHECK pass (checking for obvious problems).
Checking module sbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\sbox'.

6. Executing JSON backend.

End of script. Logfile hash: 1ee35b5dd9, CPU: user 0.43s system 0.06s, MEM: 27.12 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 22% 13x opt_expr (0 sec), 16% 13x opt_clean (0 sec), ...
| CircuitGraph | Total:  884 | Linear:  466 | Non-linear:  144 | Registers:  176 | Mux:    0 | 
parse.py successful (0.02s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_cms/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_cms/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_cms/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_cms/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X0: 198
X1: 161
Q0: 20
Q1: 145
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module aes_sbox.
Importing module lin_map_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
Importing module square_scaler.
Importing module lin_map_02da8ad445d583aa0b15e477bf78ce77640c028f.
Importing module shared_mul_gf4_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
Importing module inverter_2_e743a090e21467e3c563545c4153a442f7e5e1d3.
Importing module gf2_mul_4.
Importing module shared_mul_gf2_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
Importing module gf2_mul_2.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \aes_sbox
Used module:     \shared_mul_gf4_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0
Used module:         \gf2_mul_4
Used module:     \inverter_2_e743a090e21467e3c563545c4153a442f7e5e1d3
Used module:         \shared_mul_gf2_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0
Used module:             \gf2_mul_2
Used module:     \lin_map_02da8ad445d583aa0b15e477bf78ce77640c028f
Used module:     \square_scaler
Used module:     \lin_map_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0

2.1.2. Analyzing design hierarchy..
Top module:  \aes_sbox
Used module:     \shared_mul_gf4_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0
Used module:         \gf2_mul_4
Used module:     \inverter_2_e743a090e21467e3c563545c4153a442f7e5e1d3
Used module:         \shared_mul_gf2_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0
Used module:             \gf2_mul_2
Used module:     \lin_map_02da8ad445d583aa0b15e477bf78ce77640c028f
Used module:     \square_scaler
Used module:     \lin_map_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gf2_mul_2.
Optimizing module shared_mul_gf2_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
<suppressed ~3 debug messages>
Optimizing module gf2_mul_4.
Optimizing module inverter_2_e743a090e21467e3c563545c4153a442f7e5e1d3.
<suppressed ~6 debug messages>
Optimizing module shared_mul_gf4_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
<suppressed ~3 debug messages>
Optimizing module lin_map_02da8ad445d583aa0b15e477bf78ce77640c028f.
<suppressed ~111 debug messages>
Optimizing module square_scaler.
Optimizing module lin_map_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
<suppressed ~104 debug messages>
Optimizing module aes_sbox.
<suppressed ~5 debug messages>

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module gf2_mul_2.
Deleting now unused module shared_mul_gf2_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
Deleting now unused module gf2_mul_4.
Deleting now unused module inverter_2_e743a090e21467e3c563545c4153a442f7e5e1d3.
Deleting now unused module shared_mul_gf4_2_fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0.
Deleting now unused module lin_map_02da8ad445d583aa0b15e477bf78ce77640c028f.
Deleting now unused module square_scaler.
Deleting now unused module lin_map_3291e0d9b5e0c5e116ac078cba118c8ac6b923f0.
<suppressed ~21 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.
<suppressed ~7 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..
Removed 0 unused cells and 663 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module aes_sbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
<suppressed ~666 debug messages>
Removed a total of 222 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_sbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.shared_sel_pipelined_4staged.b_mul_e.1513 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.shared_sel_pipelined_4staged.a_mul_e.1513 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.mult_msb.1176 ($adff) from module aes_sbox.
Removing never-active ARST on \179 ($adff) from module aes_sbox.
Removing never-active ARST on \178 ($adff) from module aes_sbox.
Removing never-active ARST on \174 ($adff) from module aes_sbox.
Removing never-active ARST on \173 ($adff) from module aes_sbox.
Removing never-active ARST on \172 ($adff) from module aes_sbox.
Removing never-active ARST on \171 ($adff) from module aes_sbox.
Removing never-active ARST on \170 ($adff) from module aes_sbox.
Removing never-active ARST on \169 ($adff) from module aes_sbox.
Removing never-active ARST on \168 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.shared_sel_pipelined_4staged.a_mul_b.1513 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1307 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1306 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1305 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1304 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1303 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.inverter_gf24.1302 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.mult_lsb.1176 ($adff) from module aes_sbox.
Removing never-active ARST on \167 ($adff) from module aes_sbox.
Removing never-active ARST on \166 ($adff) from module aes_sbox.
Removing never-active ARST on \165 ($adff) from module aes_sbox.
Removing never-active ARST on masked_variant_pipelined_8_staged.mul_y0y1.1176 ($adff) from module aes_sbox.

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..
Removed 0 unused cells and 222 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_sbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_sbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module aes_sbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_sbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aes_sbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aes_sbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~543 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aes_sbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aes_sbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aes_sbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \aes_sbox

2.23.2. Analyzing design hierarchy..
Top module:  \aes_sbox
Removed 0 unused modules.

2.24. Printing statistics.

=== aes_sbox ===

   Number of wires:                536
   Number of wire bits:           1451
   Number of public wires:         238
   Number of public wire bits:    1143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                750
     $_AND_                        144
     $_DFF_P_                      208
     $_NOT_                          4
     $_XOR_                        394

2.25. Executing CHECK pass (checking for obvious problems).
Checking module aes_sbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\aes_sbox'.

6. Executing JSON backend.

End of script. Logfile hash: 5329af2d92, CPU: user 0.47s system 0.07s, MEM: 27.62 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 21% 13x opt_expr (0 sec), 17% 13x opt_clean (0 sec), ...
| CircuitGraph | Total:  810 | Linear:  394 | Non-linear:  144 | Registers:  208 | Mux:    0 | 
parse.py successful (0.02s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_dom/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_dom/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_dom/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_dom/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X0: 198
X1: 161
Q0: 19
Q1: 150
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC := '0');
           ^
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC := '0');
           ^
GF16_inv_282_bit.vhd:37:12:warning: no assignment for port "y" [-Wnowrite]
           y            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:38:12:warning: no assignment for port "z" [-Wnowrite]
           z            : out  STD_LOGIC := '0';
           ^
GF16_inv_282_bit.vhd:39:12:warning: no assignment for port "t" [-Wnowrite]
           t            : out  STD_LOGIC := '0');
           ^
GF16_inv_282_bit.vhd:36:27:warning: no assignment for port "x" [-Wnowrite]
                          x             : out  STD_LOGIC := '0';
                          ^
GF16_inv_282_bit.vhd:36:27:warning: no assignment for port "x" [-Wnowrite]
                          x             : out  STD_LOGIC := '0';
                          ^
GF16_inv_282_bit.vhd:36:27:warning: no assignment for port "x" [-Wnowrite]
                          x             : out  STD_LOGIC := '0';
                          ^
Importing module GF256_INV.
Importing module reg_8.
Importing module gf6_sq_scl_mul_canright.
Importing module gf16_inv_282.
Importing module gf16_mul2_canright.
Importing module gf6_sq_scl_mul_canright_n.
Importing module reg_16.
Importing module gf6_sq_scl_mul_canright_l.
Importing module gf16_inv_282_n.
Importing module reg_32.
Importing module gf16_inv_282_l.
Importing module gf16_mul2_canright_n.
Importing module gf6_sq_scl_mul_canright_bit_1.
Importing module gf6_sq_scl_mul_canright_bit_2.
Importing module gf6_sq_scl_mul_canright_bit_3.
Importing module gf6_sq_scl_mul_canright_bit_4.
Importing module xor_2.
Importing module gf16_inv_282_bit_1.
Importing module gf16_inv_282_bit_2.
Importing module gf16_inv_282_bit_3.
Importing module gf16_inv_282_bit_4.
Importing module gf16_inv_282_bit_5.
Importing module gf16_inv_282_bit_6.
Importing module gf16_inv_282_bit_7.
Importing module gf16_inv_282_bit_8.
Importing module gf16_inv_282_bit_9.
Importing module gf16_inv_282_bit_10.
Importing module gf16_inv_282_bit_11.
Importing module xor_4.
Importing module gf16_mul2_canright_bit_1.
Importing module gf16_mul2_canright_bit_2.
Importing module gf16_mul2_canright_bit_3.
Importing module gf16_mul2_canright_bit_4.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \GF256_INV
Used module:     \gf16_mul2_canright
Used module:         \gf6_sq_scl_mul_canright_l
Used module:             \xor_2
Used module:         \reg_16
Used module:         \gf16_mul2_canright_n
Used module:             \gf16_mul2_canright_bit_4
Used module:             \gf16_mul2_canright_bit_3
Used module:             \gf16_mul2_canright_bit_2
Used module:             \gf16_mul2_canright_bit_1
Used module:     \reg_8
Used module:     \gf16_inv_282
Used module:         \gf16_inv_282_l
Used module:             \xor_4
Used module:         \reg_32
Used module:         \gf16_inv_282_n
Used module:             \gf16_inv_282_bit_11
Used module:             \gf16_inv_282_bit_10
Used module:             \gf16_inv_282_bit_9
Used module:             \gf16_inv_282_bit_8
Used module:             \gf16_inv_282_bit_7
Used module:             \gf16_inv_282_bit_6
Used module:             \gf16_inv_282_bit_5
Used module:             \gf16_inv_282_bit_4
Used module:             \gf16_inv_282_bit_3
Used module:             \gf16_inv_282_bit_2
Used module:             \gf16_inv_282_bit_1
Used module:     \gf6_sq_scl_mul_canright
Used module:         \gf6_sq_scl_mul_canright_n
Used module:             \gf6_sq_scl_mul_canright_bit_4
Used module:             \gf6_sq_scl_mul_canright_bit_3
Used module:             \gf6_sq_scl_mul_canright_bit_2
Used module:             \gf6_sq_scl_mul_canright_bit_1

2.1.2. Analyzing design hierarchy..
Top module:  \GF256_INV
Used module:     \gf16_mul2_canright
Used module:         \gf6_sq_scl_mul_canright_l
Used module:             \xor_2
Used module:         \reg_16
Used module:         \gf16_mul2_canright_n
Used module:             \gf16_mul2_canright_bit_4
Used module:             \gf16_mul2_canright_bit_3
Used module:             \gf16_mul2_canright_bit_2
Used module:             \gf16_mul2_canright_bit_1
Used module:     \reg_8
Used module:     \gf16_inv_282
Used module:         \gf16_inv_282_l
Used module:             \xor_4
Used module:         \reg_32
Used module:         \gf16_inv_282_n
Used module:             \gf16_inv_282_bit_11
Used module:             \gf16_inv_282_bit_10
Used module:             \gf16_inv_282_bit_9
Used module:             \gf16_inv_282_bit_8
Used module:             \gf16_inv_282_bit_7
Used module:             \gf16_inv_282_bit_6
Used module:             \gf16_inv_282_bit_5
Used module:             \gf16_inv_282_bit_4
Used module:             \gf16_inv_282_bit_3
Used module:             \gf16_inv_282_bit_2
Used module:             \gf16_inv_282_bit_1
Used module:     \gf6_sq_scl_mul_canright
Used module:         \gf6_sq_scl_mul_canright_n
Used module:             \gf6_sq_scl_mul_canright_bit_4
Used module:             \gf6_sq_scl_mul_canright_bit_3
Used module:             \gf6_sq_scl_mul_canright_bit_2
Used module:             \gf6_sq_scl_mul_canright_bit_1
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gf16_mul2_canright_bit_4.
Optimizing module gf16_mul2_canright_bit_3.
Optimizing module gf16_mul2_canright_bit_2.
Optimizing module gf16_mul2_canright_bit_1.
Optimizing module xor_4.
Optimizing module gf16_inv_282_bit_11.
Optimizing module gf16_inv_282_bit_10.
Optimizing module gf16_inv_282_bit_9.
Optimizing module gf16_inv_282_bit_8.
Optimizing module gf16_inv_282_bit_7.
Optimizing module gf16_inv_282_bit_6.
Optimizing module gf16_inv_282_bit_5.
Optimizing module gf16_inv_282_bit_4.
Optimizing module gf16_inv_282_bit_3.
Optimizing module gf16_inv_282_bit_2.
Optimizing module gf16_inv_282_bit_1.
Optimizing module xor_2.
Optimizing module gf6_sq_scl_mul_canright_bit_4.
Optimizing module gf6_sq_scl_mul_canright_bit_3.
Optimizing module gf6_sq_scl_mul_canright_bit_2.
Optimizing module gf6_sq_scl_mul_canright_bit_1.
<suppressed ~1 debug messages>
Optimizing module gf16_mul2_canright_n.
Optimizing module gf16_inv_282_l.
Optimizing module reg_32.
Optimizing module gf16_inv_282_n.
Optimizing module gf6_sq_scl_mul_canright_l.
Optimizing module reg_16.
Optimizing module gf6_sq_scl_mul_canright_n.
Optimizing module gf16_mul2_canright.
Optimizing module gf16_inv_282.
Optimizing module gf6_sq_scl_mul_canright.
Optimizing module reg_8.
Optimizing module GF256_INV.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module gf16_mul2_canright_bit_4.
Deleting now unused module gf16_mul2_canright_bit_3.
Deleting now unused module gf16_mul2_canright_bit_2.
Deleting now unused module gf16_mul2_canright_bit_1.
Deleting now unused module xor_4.
Deleting now unused module gf16_inv_282_bit_11.
Deleting now unused module gf16_inv_282_bit_10.
Deleting now unused module gf16_inv_282_bit_9.
Deleting now unused module gf16_inv_282_bit_8.
Deleting now unused module gf16_inv_282_bit_7.
Deleting now unused module gf16_inv_282_bit_6.
Deleting now unused module gf16_inv_282_bit_5.
Deleting now unused module gf16_inv_282_bit_4.
Deleting now unused module gf16_inv_282_bit_3.
Deleting now unused module gf16_inv_282_bit_2.
Deleting now unused module gf16_inv_282_bit_1.
Deleting now unused module xor_2.
Deleting now unused module gf6_sq_scl_mul_canright_bit_4.
Deleting now unused module gf6_sq_scl_mul_canright_bit_3.
Deleting now unused module gf6_sq_scl_mul_canright_bit_2.
Deleting now unused module gf6_sq_scl_mul_canright_bit_1.
Deleting now unused module gf16_mul2_canright_n.
Deleting now unused module gf16_inv_282_l.
Deleting now unused module reg_32.
Deleting now unused module gf16_inv_282_n.
Deleting now unused module gf6_sq_scl_mul_canright_l.
Deleting now unused module reg_16.
Deleting now unused module gf6_sq_scl_mul_canright_n.
Deleting now unused module gf16_mul2_canright.
Deleting now unused module gf16_inv_282.
Deleting now unused module gf6_sq_scl_mul_canright.
Deleting now unused module reg_8.
<suppressed ~63 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.
<suppressed ~32 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..
Removed 0 unused cells and 507 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module GF256_INV...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
<suppressed ~1461 debug messages>
Removed a total of 487 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..
Removed 0 unused cells and 486 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module GF256_INV:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GF256_INV..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GF256_INV.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~1233 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module GF256_INV.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GF256_INV'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GF256_INV..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \GF256_INV

2.23.2. Analyzing design hierarchy..
Top module:  \GF256_INV
Removed 0 unused modules.

2.24. Printing statistics.

=== GF256_INV ===

   Number of wires:               1850
   Number of wire bits:           3394
   Number of public wires:         897
   Number of public wire bits:    2441
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1364
     $_AND_                        302
     $_DFF_P_                      222
     $_NOT_                          1
     $_XOR_                        839

2.25. Executing CHECK pass (checking for obvious problems).
Checking module GF256_INV...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\GF256_INV'.

6. Executing JSON backend.

End of script. Logfile hash: 0ff3a53d9c, CPU: user 0.93s system 0.09s, MEM: 35.49 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 25% 13x opt_expr (0 sec), 19% 13x opt_clean (0 sec), ...
| CircuitGraph | Total: 1386 | Linear:  839 | Non-linear:  302 | Registers:  222 | Mux:    0 | 
parse.py successful (0.05s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_NoFresh/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_NoFresh/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_NoFresh/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_NoFresh/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench

/home/lucien/git/coco-alma/examples/aes_sbox_NoFresh/verilator_tb.cpp:43:25: warning: unused variable 'Z' [-Wunused-variable]
    int X0, X1, Y0, Y1, Z;
                        ^
1 warning generated.

4: Simulating circuit and generating VCD
P: 8
Q: 6
p: 8
q: 6
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  814 | Linear:  376 | Non-linear:  156 | Registers:   80 | Mux:    0 | 
parse.py successful (0.49s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/aes_sbox_TI/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/aes_sbox_TI/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/aes_sbox_TI/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/aes_sbox_TI/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 103 67
X0: 198 c6
X1: 161 a1
Q0: 41 29
Q1: 163 a3
Q2: 139 8b
Q3: 105 69
Q: 104 68
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  102 | Linear:   30 | Non-linear:   20 | Registers:   20 | Mux:    0 | 
parse.py successful (0.37s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 14
Y[0]: 10
Y[1]: 0
X: 8
Y: 10
Q: 10
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:   92 | Linear:   20 | Non-linear:   20 | Registers:   20 | Mux:    0 | 
parse.py successful (0.37s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1prime/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1prime/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1prime/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM1prime/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 14
Y[0]: 10
Y[1]: 0
X: 8
Y: 10
Q: 10
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  217 | Linear:   75 | Non-linear:   45 | Registers:   45 | Mux:    0 | 
parse.py successful (1.44s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 9
X[2]: 6
Y[0]: 21
Y[1]: 3
Y[2]: 21
X: 9
Y: 3
Q: 3
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  377 | Linear:  140 | Non-linear:   80 | Registers:   80 | Mux:    0 | 
parse.py successful (4.59s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM3/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM3/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM3/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_DOM3/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 9
X[2]: 19
X[3]: 20
Y[0]: 21
Y[1]: 3
Y[2]: 15
Y[3]: 19
X: 8
Y: 10
Q: 10
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:   66 | Linear:   20 | Non-linear:   20 | Registers:    0 | Mux:    0 | 
parse.py successful (0.14s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_L1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_L1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench

/home/lucien/git/coco-alma/examples/keccak_sbox_L1/verilator_tb.cpp:25:24: warning: operator '<<' has lower precedence than '+'; '+' will be evaluated first [-Wshift-op-parentheses]
        mask ^= (1 << i+1);
                   ~~ ~^~
/home/lucien/git/coco-alma/examples/keccak_sbox_L1/verilator_tb.cpp:25:24: note: place parentheses around the '+' expression to silence this warning
        mask ^= (1 << i+1);
                       ^
                      (  )
1 warning generated.

4: Simulating circuit and generating VCD
3
3, 2, 1, 3, 1
1, 0, 1, 1, 1
0, 1, 1, 0, 1
X: 22
Y: 2
Q: 2
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  131 | Linear:   45 | Non-linear:   45 | Registers:    0 | Mux:    0 | 
parse.py successful (0.20s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_L2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_L2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench

/home/lucien/git/coco-alma/examples/keccak_sbox_L2/verilator_tb.cpp:25:24: warning: operator '<<' has lower precedence than '+'; '+' will be evaluated first [-Wshift-op-parentheses]
        mask ^= (1 << i+1);
                   ~~ ~^~
/home/lucien/git/coco-alma/examples/keccak_sbox_L2/verilator_tb.cpp:25:24: note: place parentheses around the '+' expression to silence this warning
        mask ^= (1 << i+1);
                       ^
                      (  )
1 warning generated.

4: Simulating circuit and generating VCD
7
5, 6, 1, 3, 1
1, 0, 1, 1, 1
1, 1, 1, 0, 1
0, 0, 1, 0, 1
X: 20
Y: 17
Q: 17
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  221 | Linear:   80 | Non-linear:   80 | Registers:    0 | Mux:    0 | 
parse.py successful (0.30s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_L3/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L3/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_L3/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_L3/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench

/home/lucien/git/coco-alma/examples/keccak_sbox_L3/verilator_tb.cpp:25:24: warning: operator '<<' has lower precedence than '+'; '+' will be evaluated first [-Wshift-op-parentheses]
        mask ^= (1 << i+1);
                   ~~ ~^~
/home/lucien/git/coco-alma/examples/keccak_sbox_L3/verilator_tb.cpp:25:24: note: place parentheses around the '+' expression to silence this warning
        mask ^= (1 << i+1);
                       ^
                      (  )
1 warning generated.

4: Simulating circuit and generating VCD
15
7, 6, 9, 3, 1
1, 0, 1, 1, 1
0, 1, 1, 0, 1
1, 0, 1, 0, 1
1, 0, 0, 0, 1
X: 17
Y: 21
Q: 21
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:   90 | Linear:   34 | Non-linear:   20 | Registers:   20 | Mux:    0 | 
parse.py successful (0.14s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_NF1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_NF1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_NF1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_NF1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 14
Y[0]: 23
Y[1]: 29
X: 8
Y: 10
Q: 10
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  191 | Linear:   80 | Non-linear:   45 | Registers:   45 | Mux:    0 | 
parse.py successful (0.28s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/keccak_sbox_NF2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/keccak_sbox_NF2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/keccak_sbox_NF2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/keccak_sbox_NF2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X[0]: 6
X[1]: 9
X[2]: 6
Y[0]: 29
Y[1]: 23
Y[2]: 9
X: 9
Y: 3
Q: 3
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  403 | Linear:  226 | Non-linear:   36 | Registers:   70 | Mux:    0 | 
parse.py successful (0.49s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_L2_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_L2_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 15, Y:  6, Q:  6: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  256 | Linear:  102 | Non-linear:   36 | Registers:   72 | Mux:    0 | 
parse.py successful (0.26s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_L2_4stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2_4stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2_4stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_L2_4stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  788 | Linear:  452 | Non-linear:   72 | Registers:  140 | Mux:    0 | 
parse.py successful (0.86s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_L2s_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2s_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_L2s_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_L2s_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 1
Q: 4
p: 1
q: 4
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  994 | Linear:  639 | Non-linear:  135 | Registers:   96 | Mux:    0 | 
parse.py successful (2.18s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_LL2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_LL2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_LL2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_LL2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total: 1966 | Linear: 1278 | Non-linear:  270 | Registers:  192 | Mux:    0 | 
parse.py successful (3.38s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_LL2s/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_LL2s/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_LL2s/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_LL2s/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 7
Q: 15
p: 7
q: 15
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module MaskedSbox.
Importing module n.
Importing module reg_28.
Importing module l.
Importing module componentfunction_merge4_1_13_13_21.
Importing module componentfunction_merge4_2_9_14_22.
Importing module componentfunction_merge4_3_15_15_23.
Importing module componentfunction_merge4_4_10_16_24.
Importing module componentfunction_merge4_5_17_17_25.
Importing module componentfunction_merge4_6_11_18_26.
Importing module componentfunction_merge4_7_19_19_27.
Importing module componentfunction_merge4_8_12_20_28.
Importing module xor_4.
Importing module xor_2.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:         \xor_2
Used module:     \reg_28
Used module:     \n
Used module:         \componentfunction_merge4_8_12_20_28
Used module:         \componentfunction_merge4_7_19_19_27
Used module:         \componentfunction_merge4_6_11_18_26
Used module:         \componentfunction_merge4_5_17_17_25
Used module:         \componentfunction_merge4_4_10_16_24
Used module:         \componentfunction_merge4_3_15_15_23
Used module:         \componentfunction_merge4_2_9_14_22
Used module:         \componentfunction_merge4_1_13_13_21

2.1.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:         \xor_2
Used module:     \reg_28
Used module:     \n
Used module:         \componentfunction_merge4_8_12_20_28
Used module:         \componentfunction_merge4_7_19_19_27
Used module:         \componentfunction_merge4_6_11_18_26
Used module:         \componentfunction_merge4_5_17_17_25
Used module:         \componentfunction_merge4_4_10_16_24
Used module:         \componentfunction_merge4_3_15_15_23
Used module:         \componentfunction_merge4_2_9_14_22
Used module:         \componentfunction_merge4_1_13_13_21
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xor_2.
Optimizing module xor_4.
Optimizing module componentfunction_merge4_8_12_20_28.
<suppressed ~27 debug messages>
Optimizing module componentfunction_merge4_7_19_19_27.
<suppressed ~31 debug messages>
Optimizing module componentfunction_merge4_6_11_18_26.
<suppressed ~27 debug messages>
Optimizing module componentfunction_merge4_5_17_17_25.
<suppressed ~19 debug messages>
Optimizing module componentfunction_merge4_4_10_16_24.
<suppressed ~16 debug messages>
Optimizing module componentfunction_merge4_3_15_15_23.
<suppressed ~33 debug messages>
Optimizing module componentfunction_merge4_2_9_14_22.
<suppressed ~31 debug messages>
Optimizing module componentfunction_merge4_1_13_13_21.
<suppressed ~30 debug messages>
Optimizing module l.
Optimizing module reg_28.
Optimizing module n.
Optimizing module MaskedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module xor_2.
Deleting now unused module xor_4.
Deleting now unused module componentfunction_merge4_8_12_20_28.
Deleting now unused module componentfunction_merge4_7_19_19_27.
Deleting now unused module componentfunction_merge4_6_11_18_26.
Deleting now unused module componentfunction_merge4_5_17_17_25.
Deleting now unused module componentfunction_merge4_4_10_16_24.
Deleting now unused module componentfunction_merge4_3_15_15_23.
Deleting now unused module componentfunction_merge4_2_9_14_22.
Deleting now unused module componentfunction_merge4_1_13_13_21.
Deleting now unused module l.
Deleting now unused module reg_28.
Deleting now unused module n.
<suppressed ~19 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~2 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 34 unused cells and 344 unused wires.
<suppressed ~43 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
<suppressed ~357 debug messages>
Removed a total of 119 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 119 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~9 debug messages>

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.16. Rerunning OPT passes. (Maybe there is more to do..)

2.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.20. Executing OPT_DFF pass (perform DFF optimizations).

2.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.23. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking MaskedSbox.inaff_output_reg.q as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on inaff_output_reg.117 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f3.$auto$ghdl.cc:1027:import_module$407, Q = \inaff_output_reg.q [22], rval = 1'0).
Adding SRST signal on inaff_output_reg.117 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f2.$auto$ghdl.cc:1026:import_module$286, Q = \inaff_output_reg.q [21], rval = 1'0).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 2 unused cells and 0 unused wires.
<suppressed ~2 debug messages>

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.9. Rerunning OPT passes. (Maybe there is more to do..)

2.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.13. Executing OPT_DFF pass (perform DFF optimizations).

2.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.16. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MaskedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~36 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~194 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \MaskedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== MaskedSbox ===

   Number of wires:                261
   Number of wire bits:            517
   Number of public wires:         177
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     $_AND_                         18
     $_DFF_P_                       26
     $_MUX_                         68
     $_NOT_                          5
     $_OR_                           7
     $_SDFF_PN0_                     1
     $_SDFF_PP0_                     1
     $_XOR_                         20

2.25. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\MaskedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: 69f7ca6c07, CPU: user 0.31s system 0.07s, MEM: 26.00 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 27% 1x ghdl (0 sec), 19% 15x opt_expr (0 sec), ...
| CircuitGraph | Total:  162 | Linear:   20 | Non-linear:   25 | Registers:   28 | Mux:   70 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_NF1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_NF1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_NF1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_NF1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 7
Q: 7
X0: 6
X1: 1
Q0: 7
Q1: 0
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  288 | Linear:  146 | Non-linear:   36 | Registers:   75 | Mux:    0 | 
parse.py successful (0.39s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/midori_sbox_NF2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/midori_sbox_NF2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/midori_sbox_NF2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/midori_sbox_NF2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  391 | Linear:  211 | Non-linear:   36 | Registers:   70 | Mux:    0 | 
parse.py successful (0.49s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_L2_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_L2_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_L2_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_L2_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  286 | Linear:  117 | Non-linear:   36 | Registers:   84 | Mux:    0 | 
parse.py successful (0.28s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_L2_5stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_L2_5stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_L2_5stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_L2_5stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  758 | Linear:  421 | Non-linear:   72 | Registers:  139 | Mux:    0 | 
parse.py successful (0.79s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_L2s_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_L2s_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_L2s_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_L2s_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 13
Q: 10
p: 13
q: 10
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
N_bit.vhd:37:22:warning: no assignment for port "x" [-Wnowrite]
                     x          : out  STD_LOGIC ;
                     ^
N_bit.vhd:37:22:warning: no assignment for port "x" [-Wnowrite]
                     x          : out  STD_LOGIC ;
                     ^
N_bit.vhd:37:22:warning: no assignment for port "x" [-Wnowrite]
                     x          : out  STD_LOGIC ;
                     ^
N_bit.vhd:37:22:warning: no assignment for port "x" [-Wnowrite]
                     x          : out  STD_LOGIC ;
                     ^
Importing module MaskedSbox.
Importing module n.
Importing module dflipflop_28.
Importing module l.
Importing module n_bit_1.
Importing module n_bit_2.
Importing module n_bit_3.
Importing module n_bit_4.
Importing module n_bit_5.
Importing module n_bit_6.
Importing module n_bit_7.
Importing module n_bit_8.
Importing module xor_4.
Importing module xor_2.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:         \xor_2
Used module:     \dflipflop_28
Used module:     \n
Used module:         \n_bit_8
Used module:         \n_bit_7
Used module:         \n_bit_6
Used module:         \n_bit_5
Used module:         \n_bit_4
Used module:         \n_bit_3
Used module:         \n_bit_2
Used module:         \n_bit_1

2.1.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:         \xor_2
Used module:     \dflipflop_28
Used module:     \n
Used module:         \n_bit_8
Used module:         \n_bit_7
Used module:         \n_bit_6
Used module:         \n_bit_5
Used module:         \n_bit_4
Used module:         \n_bit_3
Used module:         \n_bit_2
Used module:         \n_bit_1
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module xor_2.
Optimizing module xor_4.
Optimizing module n_bit_8.
Optimizing module n_bit_7.
Optimizing module n_bit_6.
Optimizing module n_bit_5.
Optimizing module n_bit_4.
Optimizing module n_bit_3.
Optimizing module n_bit_2.
Optimizing module n_bit_1.
<suppressed ~2 debug messages>
Optimizing module l.
Optimizing module dflipflop_28.
Optimizing module n.
Optimizing module MaskedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module xor_2.
Deleting now unused module xor_4.
Deleting now unused module n_bit_8.
Deleting now unused module n_bit_7.
Deleting now unused module n_bit_6.
Deleting now unused module n_bit_5.
Deleting now unused module n_bit_4.
Deleting now unused module n_bit_3.
Deleting now unused module n_bit_2.
Deleting now unused module n_bit_1.
Deleting now unused module l.
Deleting now unused module dflipflop_28.
Deleting now unused module n.
<suppressed ~19 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~2 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 90 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
<suppressed ~498 debug messages>
Removed a total of 166 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 164 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MaskedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~272 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \MaskedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== MaskedSbox ===

   Number of wires:                307
   Number of wire bits:            485
   Number of public wires:         143
   Number of public wire bits:     321
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                224
     $_AND_                         48
     $_DFF_P_                       26
     $_NOT_                          1
     $_XOR_                        149

2.25. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\MaskedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: fff1d88d82, CPU: user 0.27s system 0.07s, MEM: 25.88 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 20% 13x opt_expr (0 sec), 20% 1x ghdl (0 sec), ...
| CircuitGraph | Total:  238 | Linear:  149 | Non-linear:   48 | Registers:   26 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_NF1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_NF1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_NF1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_NF1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 7
Q: 13
X0: 6
X1: 1
Q0: 8
Q1: 5
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  273 | Linear:  133 | Non-linear:   36 | Registers:   75 | Mux:    0 | 
parse.py successful (0.37s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_NF2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_NF2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_NF2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_NF2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 



 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module sharedSbox.
Importing module f1boom.
Importing module f2boom.
Importing module f3boom.
Importing module g1boom.
Importing module g2boom.
Importing module g3boom.
Importing module dflipfloplw1in_4.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom

2.1.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dflipfloplw1in_4.
Optimizing module g3boom.
Optimizing module g2boom.
Optimizing module g1boom.
Optimizing module f3boom.
Optimizing module f2boom.
Optimizing module f1boom.
Optimizing module sharedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module dflipfloplw1in_4.
Deleting now unused module g3boom.
Deleting now unused module g2boom.
Deleting now unused module g1boom.
Deleting now unused module f3boom.
Deleting now unused module f2boom.
Deleting now unused module f1boom.
<suppressed ~9 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sharedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~245 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \sharedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== sharedSbox ===

   Number of wires:                253
   Number of wire bits:            463
   Number of public wires:         108
   Number of public wire bits:     318
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                181
     $_AND_                         72
     $_DFF_P_                       12
     $_XNOR_                         3
     $_XOR_                         94

2.25. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\sharedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: ba4afa0617, CPU: user 0.23s system 0.08s, MEM: 26.00 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 27% 1x ghdl (0 sec), 16% 13x opt_expr (0 sec), ...
| CircuitGraph | Total:  199 | Linear:   97 | Non-linear:   72 | Registers:   12 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_TINU/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_TINU/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_TINU/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_TINU/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 8
Q: 3
X0: 6
X1: 9
Q0: 1
Q1: 7
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module sharedSbox.
Importing module f1boom.
Importing module f2boom.
Importing module f3boom.
Importing module g1boom.
Importing module g2boom.
Importing module g3boom.
Importing module dflipfloplw1in_4.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom

2.1.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dflipfloplw1in_4.
Optimizing module g3boom.
Optimizing module g2boom.
Optimizing module g1boom.
Optimizing module f3boom.
Optimizing module f2boom.
Optimizing module f1boom.
Optimizing module sharedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module dflipfloplw1in_4.
Deleting now unused module g3boom.
Deleting now unused module g2boom.
Deleting now unused module g1boom.
Deleting now unused module f3boom.
Deleting now unused module f2boom.
Deleting now unused module f1boom.
<suppressed ~9 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sharedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~251 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \sharedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== sharedSbox ===

   Number of wires:                258
   Number of wire bits:            468
   Number of public wires:         110
   Number of public wire bits:     320
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                187
     $_AND_                         72
     $_DFF_P_                       12
     $_XNOR_                         3
     $_XOR_                        100

2.25. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\sharedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: a0dd24afe1, CPU: user 0.27s system 0.06s, MEM: 26.00 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 26% 1x ghdl (0 sec), 15% 13x opt_expr (0 sec), ...
| CircuitGraph | Total:  205 | Linear:  103 | Non-linear:   72 | Registers:   12 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_TIU1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_TIU1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_TIU1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_TIU1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 8
Q: 3
X0: 6
X1: 9
Q0: 1
Q1: 12
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module sharedSbox.
Importing module f1boom.
Importing module f2boom.
Importing module f3boom.
Importing module g1boom.
Importing module g2boom.
Importing module g3boom.
Importing module dflipfloplw1in_4.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom

2.1.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Used module:     \dflipfloplw1in_4
Used module:     \g3boom
Used module:     \g2boom
Used module:     \g1boom
Used module:     \f3boom
Used module:     \f2boom
Used module:     \f1boom
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dflipfloplw1in_4.
Optimizing module g3boom.
Optimizing module g2boom.
Optimizing module g1boom.
Optimizing module f3boom.
Optimizing module f2boom.
Optimizing module f1boom.
Optimizing module sharedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module dflipfloplw1in_4.
Deleting now unused module g3boom.
Deleting now unused module g2boom.
Deleting now unused module g1boom.
Deleting now unused module f3boom.
Deleting now unused module f2boom.
Deleting now unused module f1boom.
<suppressed ~9 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 380 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
<suppressed ~1119 debug messages>
Removed a total of 373 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..
Removed 0 unused cells and 349 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sharedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sharedSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sharedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~1200 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sharedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sharedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sharedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \sharedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \sharedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== sharedSbox ===

   Number of wires:               1255
   Number of wire bits:           1465
   Number of public wires:         475
   Number of public wire bits:     685
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1136
     $_AND_                        796
     $_DFF_P_                       12
     $_NOT_                         24
     $_OR_                         304

2.25. Executing CHECK pass (checking for obvious problems).
Checking module sharedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\sharedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: d72740f421, CPU: user 0.81s system 0.05s, MEM: 29.67 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 26% 13x opt_expr (0 sec), 15% 13x opt_clean (0 sec), ...
| CircuitGraph | Total: 1154 | Linear:    0 | Non-linear: 1100 | Registers:   12 | Mux:    0 | 
parse.py successful (0.03s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/present_sbox_TIU1prime/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/present_sbox_TIU1prime/tmp/obj_dir'
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit.o Vcircuit.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit___024root__DepSet_ha3d1ef69__0.o Vcircuit___024root__DepSet_ha3d1ef69__0.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__Trace__0.o Vcircuit__Trace__0.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__Trace__1.o Vcircuit__Trace__1.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit___024root__Slow.o Vcircuit___024root__Slow.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit__Syms.o Vcircuit__Syms.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit__Trace__0__Slow.o Vcircuit__Trace__0__Slow.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit__Trace__1__Slow.o Vcircuit__Trace__1__Slow.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
Archive ar -rcs Vcircuit__ALL.a Vcircuit.o Vcircuit___024root__DepSet_ha3d1ef69__0.o Vcircuit__Trace__0.o Vcircuit__Trace__1.o Vcircuit___024root__Slow.o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.o Vcircuit__Syms.o Vcircuit__Trace__0__Slow.o Vcircuit__Trace__1__Slow.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/present_sbox_TIU1prime/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/present_sbox_TIU1prime/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 8
Q: 3
X0: 6
X1: 9
Q0: 9
Q1: 5
OK. 



bash: gensh.sh: No such file or directory
bash: run_prep.sh: No such file or directory

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module MaskedSbox.
Importing module n.
Importing module scanff_32.
Importing module l.
Importing module componentfunction_merge4_1_9_17_25.
Importing module componentfunction_merge4_2_10_18_26.
Importing module componentfunction_merge4_3_11_19_27.
Importing module componentfunction_merge4_4_12_20_28.
Importing module componentfunction_merge4_5_13_21_29.
Importing module componentfunction_merge4_6_14_22_30.
Importing module componentfunction_merge4_7_15_23_31.
Importing module componentfunction_merge4_8_16_24_32.
Importing module dflipfloplw.
Importing module xor_4.
Importing module HDSDFPQ1.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:     \scanff_32
Used module:         \dflipfloplw
Used module:             \HDSDFPQ1
Used module:     \n
Used module:         \componentfunction_merge4_8_16_24_32
Used module:         \componentfunction_merge4_7_15_23_31
Used module:         \componentfunction_merge4_6_14_22_30
Used module:         \componentfunction_merge4_5_13_21_29
Used module:         \componentfunction_merge4_4_12_20_28
Used module:         \componentfunction_merge4_3_11_19_27
Used module:         \componentfunction_merge4_2_10_18_26
Used module:         \componentfunction_merge4_1_9_17_25

2.1.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:     \scanff_32
Used module:         \dflipfloplw
Used module:             \HDSDFPQ1
Used module:     \n
Used module:         \componentfunction_merge4_8_16_24_32
Used module:         \componentfunction_merge4_7_15_23_31
Used module:         \componentfunction_merge4_6_14_22_30
Used module:         \componentfunction_merge4_5_13_21_29
Used module:         \componentfunction_merge4_4_12_20_28
Used module:         \componentfunction_merge4_3_11_19_27
Used module:         \componentfunction_merge4_2_10_18_26
Used module:         \componentfunction_merge4_1_9_17_25
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module HDSDFPQ1.
Optimizing module xor_4.
Optimizing module dflipfloplw.
Optimizing module componentfunction_merge4_8_16_24_32.
<suppressed ~44 debug messages>
Optimizing module componentfunction_merge4_7_15_23_31.
<suppressed ~50 debug messages>
Optimizing module componentfunction_merge4_6_14_22_30.
<suppressed ~39 debug messages>
Optimizing module componentfunction_merge4_5_13_21_29.
<suppressed ~48 debug messages>
Optimizing module componentfunction_merge4_4_12_20_28.
<suppressed ~52 debug messages>
Optimizing module componentfunction_merge4_3_11_19_27.
<suppressed ~44 debug messages>
Optimizing module componentfunction_merge4_2_10_18_26.
<suppressed ~49 debug messages>
Optimizing module componentfunction_merge4_1_9_17_25.
<suppressed ~50 debug messages>
Optimizing module l.
Optimizing module scanff_32.
Optimizing module n.
Optimizing module MaskedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module HDSDFPQ1.
Deleting now unused module xor_4.
Deleting now unused module dflipfloplw.
Deleting now unused module componentfunction_merge4_8_16_24_32.
Deleting now unused module componentfunction_merge4_7_15_23_31.
Deleting now unused module componentfunction_merge4_6_14_22_30.
Deleting now unused module componentfunction_merge4_5_13_21_29.
Deleting now unused module componentfunction_merge4_4_12_20_28.
Deleting now unused module componentfunction_merge4_3_11_19_27.
Deleting now unused module componentfunction_merge4_2_10_18_26.
Deleting now unused module componentfunction_merge4_1_9_17_25.
Deleting now unused module l.
Deleting now unused module scanff_32.
Deleting now unused module n.
<suppressed ~52 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 278 unused cells and 916 unused wires.
<suppressed ~320 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
<suppressed ~498 debug messages>
Removed a total of 166 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 166 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~12 debug messages>

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.16. Rerunning OPT passes. (Maybe there is more to do..)

2.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.20. Executing OPT_DFF pass (perform DFF optimizations).

2.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.23. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MaskedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~76 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\inst_n.\f1.$auto$ghdl.cc:1030:import_module$357 in front of them:
        $flatten\inst_n.\f1.$auto$ghdl.cc:1029:import_module$356
        $flatten\inst_n.\f1.$auto$ghdl.cc:1028:import_module$355

    Found cells that share an operand and can be merged by moving the $mux $flatten\inst_n.\f8.$auto$ghdl.cc:1030:import_module$2037 in front of them:
        $flatten\inst_n.\f8.$auto$ghdl.cc:1029:import_module$2036
        $flatten\inst_n.\f8.$auto$ghdl.cc:1028:import_module$2035

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~2 debug messages>

2.20.10. Rerunning OPT passes. (Maybe there is more to do..)

2.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

2.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.14. Executing OPT_SHARE pass.

2.20.15. Executing OPT_DFF pass (perform DFF optimizations).

2.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.18. Rerunning OPT passes. (Maybe there is more to do..)

2.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

2.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.22. Executing OPT_SHARE pass.

2.20.23. Executing OPT_DFF pass (perform DFF optimizations).

2.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.26. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~251 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \MaskedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== MaskedSbox ===

   Number of wires:                613
   Number of wire bits:            912
   Number of public wires:         507
   Number of public wire bits:     806
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     $_AND_                         19
     $_DFF_P_                       32
     $_MUX_                         93
     $_NOT_                          3
     $_OR_                           7
     $_XOR_                         24

2.25. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\MaskedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: 4f26b68843, CPU: user 0.41s system 0.07s, MEM: 28.10 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 29% 1x ghdl (0 sec), 17% 16x opt_expr (0 sec), ...
| CircuitGraph | Total:  193 | Linear:   24 | Non-linear:   26 | Registers:   32 | Mux:   93 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_INF1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_INF1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_INF1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_INF1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 7
Q: 9
X0: 6
X1: 1
Q0: 14
Q1: 7
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  485 | Linear:  257 | Non-linear:   63 | Registers:   91 | Mux:    0 | 
parse.py successful (0.60s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 11, Q: 11: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  486 | Linear:  257 | Non-linear:   63 | Registers:   91 | Mux:    0 | 
parse.py successful (0.60s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage_fixed/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage_fixed/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage_fixed/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_4stage_fixed/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 11, Q: 11: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  376 | Linear:  154 | Non-linear:   54 | Registers:  108 | Mux:    0 | 
parse.py successful (0.32s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_6stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_6stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2_6stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_L2_6stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 11, Q: 11: OK. 


Starting yosys synthesis...
| CircuitGraph | Total: 1882 | Linear: 1028 | Non-linear:  252 | Registers:  364 | Mux:    0 | 
parse.py successful (2.07s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_L2s_4stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2s_4stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_L2s_4stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_L2s_4stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 9
Q: 8
p: 9
q: 8
OK. 



Starting yosys synthesis...
| CircuitGraph | Total: 1186 | Linear:  752 | Non-linear:  189 | Registers:  108 | Mux:    0 | 
parse.py successful (4.56s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_LL2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_LL2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_LL2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_LL2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 15
Q: 4
X0: 7
X1: 6
Q0: 7
Q1: 6
OK. 



Starting yosys synthesis...
| CircuitGraph | Total: 2350 | Linear: 1504 | Non-linear:  378 | Registers:  216 | Mux:    0 | 
parse.py successful (6.42s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_LL2s/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_LL2s/tmp/obj_dir'
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit.o Vcircuit.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit___024root__DepSet_ha3d1ef69__0.o Vcircuit___024root__DepSet_ha3d1ef69__0.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__Trace__0.o Vcircuit__Trace__0.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__Trace__1.o Vcircuit__Trace__1.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit___024root__Slow.o Vcircuit___024root__Slow.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit__Syms.o Vcircuit__Syms.cpp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14  -c -o Vcircuit__Trace__0__Slow.o Vcircuit__Trace__0__Slow.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
Archive ar -rcs Vcircuit__ALL.a Vcircuit.o Vcircuit___024root__DepSet_ha3d1ef69__0.o Vcircuit__Trace__0.o Vcircuit__Trace__1.o Vcircuit___024root__Slow.o Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.o Vcircuit__Syms.o Vcircuit__Trace__0__Slow.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_LL2s/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_LL2s/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 1
Q: 9
p: 1
q: 9
OK. 




 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module MaskedSbox.
Importing module n.
Importing module scanff_32.
Importing module l.
Importing module componentfunction_merge4_1_9_17_25.
Importing module componentfunction_merge4_2_10_18_26.
Importing module componentfunction_merge4_3_11_19_27.
Importing module componentfunction_merge4_4_12_20_28.
Importing module componentfunction_merge4_5_13_21_29.
Importing module componentfunction_merge4_6_14_22_30.
Importing module componentfunction_merge4_7_15_23_31.
Importing module componentfunction_merge4_8_16_24_32.
Importing module dflipfloplw.
Importing module xor_4.
Importing module HDSDFPQ1.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:     \scanff_32
Used module:         \dflipfloplw
Used module:             \HDSDFPQ1
Used module:     \n
Used module:         \componentfunction_merge4_8_16_24_32
Used module:         \componentfunction_merge4_7_15_23_31
Used module:         \componentfunction_merge4_6_14_22_30
Used module:         \componentfunction_merge4_5_13_21_29
Used module:         \componentfunction_merge4_4_12_20_28
Used module:         \componentfunction_merge4_3_11_19_27
Used module:         \componentfunction_merge4_2_10_18_26
Used module:         \componentfunction_merge4_1_9_17_25

2.1.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Used module:     \l
Used module:         \xor_4
Used module:     \scanff_32
Used module:         \dflipfloplw
Used module:             \HDSDFPQ1
Used module:     \n
Used module:         \componentfunction_merge4_8_16_24_32
Used module:         \componentfunction_merge4_7_15_23_31
Used module:         \componentfunction_merge4_6_14_22_30
Used module:         \componentfunction_merge4_5_13_21_29
Used module:         \componentfunction_merge4_4_12_20_28
Used module:         \componentfunction_merge4_3_11_19_27
Used module:         \componentfunction_merge4_2_10_18_26
Used module:         \componentfunction_merge4_1_9_17_25
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module HDSDFPQ1.
Optimizing module xor_4.
Optimizing module dflipfloplw.
Optimizing module componentfunction_merge4_8_16_24_32.
<suppressed ~44 debug messages>
Optimizing module componentfunction_merge4_7_15_23_31.
<suppressed ~50 debug messages>
Optimizing module componentfunction_merge4_6_14_22_30.
<suppressed ~39 debug messages>
Optimizing module componentfunction_merge4_5_13_21_29.
<suppressed ~48 debug messages>
Optimizing module componentfunction_merge4_4_12_20_28.
<suppressed ~52 debug messages>
Optimizing module componentfunction_merge4_3_11_19_27.
<suppressed ~44 debug messages>
Optimizing module componentfunction_merge4_2_10_18_26.
<suppressed ~49 debug messages>
Optimizing module componentfunction_merge4_1_9_17_25.
<suppressed ~50 debug messages>
Optimizing module l.
Optimizing module scanff_32.
Optimizing module n.
Optimizing module MaskedSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module HDSDFPQ1.
Deleting now unused module xor_4.
Deleting now unused module dflipfloplw.
Deleting now unused module componentfunction_merge4_8_16_24_32.
Deleting now unused module componentfunction_merge4_7_15_23_31.
Deleting now unused module componentfunction_merge4_6_14_22_30.
Deleting now unused module componentfunction_merge4_5_13_21_29.
Deleting now unused module componentfunction_merge4_4_12_20_28.
Deleting now unused module componentfunction_merge4_3_11_19_27.
Deleting now unused module componentfunction_merge4_2_10_18_26.
Deleting now unused module componentfunction_merge4_1_9_17_25.
Deleting now unused module l.
Deleting now unused module scanff_32.
Deleting now unused module n.
<suppressed ~52 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 306 unused cells and 915 unused wires.
<suppressed ~319 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
<suppressed ~468 debug messages>
Removed a total of 156 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 156 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~11 debug messages>

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.13. Executing OPT_DFF pass (perform DFF optimizations).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.16. Rerunning OPT passes. (Maybe there is more to do..)

2.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

2.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.7.20. Executing OPT_DFF pass (perform DFF optimizations).

2.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.7.23. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on scanff_gen.gen:24.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f8.$auto$ghdl.cc:1026:import_module$1908, Q = \inst_l.xorinst6.in3, rval = 1'0).
Adding SRST signal on scanff_gen.gen:23.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f7.$auto$ghdl.cc:1027:import_module$1669, Q = \inst_l.xorinst6.in2, rval = 1'0).
Adding SRST signal on scanff_gen.gen:21.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f5.$auto$ghdl.cc:1027:import_module$1189, Q = \inst_l.xorinst6.in0, rval = 1'0).
Adding SRST signal on scanff_gen.gen:20.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f4.$auto$ghdl.cc:1026:import_module$948, Q = \inst_l.xorinst5.in3, rval = 1'0).
Adding SRST signal on scanff_gen.gen:19.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f3.$auto$ghdl.cc:1027:import_module$709, Q = \inst_l.xorinst5.in2, rval = 1'0).
Adding SRST signal on scanff_gen.gen:17.sff.SFFInst.2401 ($dff) from module MaskedSbox (D = $flatten\inst_n.\f1.$auto$ghdl.cc:1027:import_module$229, Q = \inst_l.xorinst5.in0, rval = 1'0).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 6 unused cells and 0 unused wires.
<suppressed ~6 debug messages>

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.9. Rerunning OPT passes. (Maybe there is more to do..)

2.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

2.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.9.13. Executing OPT_DFF pass (perform DFF optimizations).

2.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.9.16. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 8) from wire MaskedSbox.g_s.

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 19 unused wires.
<suppressed ~19 debug messages>

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MaskedSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~79 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\inst_n.\f5.$auto$ghdl.cc:1030:import_module$1142 in front of them:
        $flatten\inst_n.\f5.$auto$ghdl.cc:1029:import_module$1141
        $flatten\inst_n.\f5.$auto$ghdl.cc:1028:import_module$1140

    Found cells that share an operand and can be merged by moving the $mux $flatten\inst_n.\f7.$auto$ghdl.cc:1030:import_module$1647 in front of them:
        $flatten\inst_n.\f7.$auto$ghdl.cc:1029:import_module$1646
        $flatten\inst_n.\f7.$auto$ghdl.cc:1028:import_module$1645

    Found cells that share an operand and can be merged by moving the $mux $flatten\inst_n.\f8.$auto$ghdl.cc:1030:import_module$1887 in front of them:
        $flatten\inst_n.\f8.$auto$ghdl.cc:1029:import_module$1886
        $flatten\inst_n.\f8.$auto$ghdl.cc:1028:import_module$1885

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.
<suppressed ~3 debug messages>

2.20.10. Rerunning OPT passes. (Maybe there is more to do..)

2.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

2.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.14. Executing OPT_SHARE pass.

2.20.15. Executing OPT_DFF pass (perform DFF optimizations).

2.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.18. Rerunning OPT passes. (Maybe there is more to do..)

2.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MaskedSbox..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

2.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MaskedSbox.
Performed a total of 0 changes.

2.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.20.22. Executing OPT_SHARE pass.

2.20.23. Executing OPT_DFF pass (perform DFF optimizations).

2.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.20.26. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~229 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MaskedSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MaskedSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MaskedSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \MaskedSbox

2.23.2. Analyzing design hierarchy..
Top module:  \MaskedSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== MaskedSbox ===

   Number of wires:                608
   Number of wire bits:            919
   Number of public wires:         518
   Number of public wire bits:     829
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                156
     $_AND_                         18
     $_DFF_P_                       26
     $_MUX_                         76
     $_NOT_                          2
     $_OR_                           4
     $_SDFF_PN0_                     4
     $_SDFF_PP0_                     2
     $_XOR_                         24

2.25. Executing CHECK pass (checking for obvious problems).
Checking module MaskedSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\MaskedSbox'.

6. Executing JSON backend.

End of script. Logfile hash: bad32405d2, CPU: user 0.51s system 0.07s, MEM: 28.23 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 25% 1x ghdl (0 sec), 18% 17x opt_expr (0 sec), ...
| CircuitGraph | Total:  177 | Linear:   24 | Non-linear:   22 | Registers:   32 | Mux:   82 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_NF1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_NF1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_NF1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_NF1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 15
Q: 4
X0: 7
X1: 8
Q0: 3
Q1: 7
OK. 



Starting yosys synthesis...
| CircuitGraph | Total:  396 | Linear:  178 | Non-linear:   54 | Registers:  126 | Mux:    0 | 
parse.py successful (0.41s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_NF2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_NF2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_NF2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_NF2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 11, Q: 11: OK. 



 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module TISboxInv.
Importing module inaff.
Importing module inaffc.
Importing module q_294n.
Importing module reg_4.
Importing module m1affc.
Importing module m1aff.
Importing module m2aff.
Importing module m2affc.
Importing module outaff.
Importing module outaffc.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \TISboxInv
Used module:     \outaff
Used module:     \outaffc
Used module:     \q_294n
Used module:     \reg_4
Used module:     \m2aff
Used module:     \m2affc
Used module:     \m1aff
Used module:     \m1affc
Used module:     \inaffc
Used module:     \inaff

2.1.2. Analyzing design hierarchy..
Top module:  \TISboxInv
Used module:     \outaff
Used module:     \outaffc
Used module:     \q_294n
Used module:     \reg_4
Used module:     \m2aff
Used module:     \m2affc
Used module:     \m1aff
Used module:     \m1affc
Used module:     \inaffc
Used module:     \inaff
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module outaffc.
Optimizing module outaff.
Optimizing module m2affc.
Optimizing module m2aff.
Optimizing module m1aff.
Optimizing module m1affc.
Optimizing module reg_4.
Optimizing module q_294n.
Optimizing module inaffc.
Optimizing module inaff.
Optimizing module TISboxInv.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module outaffc.
Deleting now unused module outaff.
Deleting now unused module m2affc.
Deleting now unused module m2aff.
Deleting now unused module m1aff.
Deleting now unused module m1affc.
Deleting now unused module reg_4.
Deleting now unused module q_294n.
Deleting now unused module inaffc.
Deleting now unused module inaff.
<suppressed ~27 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module TISboxInv...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISboxInv..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISboxInv.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISboxInv..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISboxInv.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TISboxInv:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISboxInv..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISboxInv.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISboxInv..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISboxInv.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xnor.
No more expansions possible.
<suppressed ~262 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISboxInv.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISboxInv'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISboxInv..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \TISboxInv

2.23.2. Analyzing design hierarchy..
Top module:  \TISboxInv
Removed 0 unused modules.

2.24. Printing statistics.

=== TISboxInv ===

   Number of wires:                320
   Number of wire bits:            626
   Number of public wires:         176
   Number of public wire bits:     482
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                207
     $_DFF_P_                       24
     $_NOT_                         57
     $_OR_                          54
     $_XNOR_                         3
     $_XOR_                         69

2.25. Executing CHECK pass (checking for obvious problems).
Checking module TISboxInv...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\TISboxInv'.

6. Executing JSON backend.

End of script. Logfile hash: 721b790bf7, CPU: user 0.21s system 0.08s, MEM: 25.00 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 20% 12x opt_expr (0 sec), 15% 2x read_verilog (0 sec), ...
| CircuitGraph | Total:  225 | Linear:   72 | Non-linear:   54 | Registers:   24 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/prince_sbox_TI1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/prince_sbox_TI1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/prince_sbox_TI1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/prince_sbox_TI1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:8, Y:A, Q:A, OK. 



 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module CMSSbox.
Importing module sboxfghi_dp1.
Importing module reg_20.
Importing module fghi_combine.
Importing module permute.
Importing module compfghi1.
Importing module compfghip1.
Importing module compfghi2.
Importing module compfghicombine.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \CMSSbox
Used module:     \permute
Used module:     \fghi_combine
Used module:         \compfghicombine
Used module:     \reg_20
Used module:     \sboxfghi_dp1
Used module:         \compfghip1
Used module:         \compfghi2
Used module:         \compfghi1

2.1.2. Analyzing design hierarchy..
Top module:  \CMSSbox
Used module:     \permute
Used module:     \fghi_combine
Used module:         \compfghicombine
Used module:     \reg_20
Used module:     \sboxfghi_dp1
Used module:         \compfghip1
Used module:         \compfghi2
Used module:         \compfghi1
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module compfghicombine.
Optimizing module compfghi2.
Optimizing module compfghip1.
Optimizing module compfghi1.
Optimizing module permute.
Optimizing module fghi_combine.
Optimizing module reg_20.
Optimizing module sboxfghi_dp1.
Optimizing module CMSSbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module compfghicombine.
Deleting now unused module compfghi2.
Deleting now unused module compfghip1.
Deleting now unused module compfghi1.
Deleting now unused module permute.
Deleting now unused module fghi_combine.
Deleting now unused module reg_20.
Deleting now unused module sboxfghi_dp1.
<suppressed ~24 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..
Removed 0 unused cells and 122 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module CMSSbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CMSSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CMSSbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CMSSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CMSSbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module CMSSbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CMSSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CMSSbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CMSSbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CMSSbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~189 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CMSSbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CMSSbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CMSSbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \CMSSbox

2.23.2. Analyzing design hierarchy..
Top module:  \CMSSbox
Removed 0 unused modules.

2.24. Printing statistics.

=== CMSSbox ===

   Number of wires:                390
   Number of wire bits:           1526
   Number of public wires:         326
   Number of public wire bits:    1462
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                192
     $_AND_                          8
     $_DFF_P_                       80
     $_NOT_                         48
     $_OR_                          24
     $_XNOR_                         8
     $_XOR_                         24

2.25. Executing CHECK pass (checking for obvious problems).
Checking module CMSSbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\CMSSbox'.

6. Executing JSON backend.

End of script. Logfile hash: ccc7387d4b, CPU: user 0.27s system 0.07s, MEM: 25.38 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 18% 1x ghdl (0 sec), 18% 12x opt_clean (0 sec), ...
| CircuitGraph | Total:  214 | Linear:   32 | Non-linear:   32 | Registers:   80 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_CMS1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_CMS1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_CMS1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_CMS1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: ff, Y: ff, Q: ff, Q0: ad, Q1: 52, OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  282 | Linear:  124 | Non-linear:   36 | Registers:   60 | Mux:    0 | 
parse.py successful (0.30s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  266 | Linear:  100 | Non-linear:   36 | Registers:   72 | Mux:    0 | 
parse.py successful (0.25s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_4stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_4stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_4stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2_4stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  550 | Linear:  248 | Non-linear:   72 | Registers:  120 | Mux:    0 | 
parse.py successful (0.60s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2s_3stage/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2s_3stage/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_L2s_3stage/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_L2s_3stage/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: B, Q: 2, p: B, q: 2, OK. 


Starting yosys synthesis...
| CircuitGraph | Total:  628 | Linear:  375 | Non-linear:   95 | Registers:   60 | Mux:    0 | 
parse.py successful (1.25s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q:  7: Error. 
X:  1, Y:  6, Q: 11: Error. 
X:  2, Y:  9, Q:  3: Error. 
X:  3, Y:  0, Q:  9: Error. 
X:  4, Y:  1, Q:  5: Error. 
X:  5, Y: 10, Q:  4: Error. 
X:  6, Y:  2, Q:  2: OK. 
X:  7, Y: 11, Q:  3: Error. 
X:  8, Y:  3, Q:  5: Error. 
X:  9, Y:  8, Q: 15: Error. 
X: 10, Y:  5, Q:  1: Error. 
X: 11, Y: 13, Q:  8: Error. 
X: 12, Y:  4, Q:  1: Error. 
X: 13, Y: 14, Q:  1: Error. 
X: 14, Y:  7, Q:  3: Error. 
X: 15, Y: 15, Q:  3: Error. 


X:  0, Y: 12, Q:  7: Error. 
X:  1, Y:  6, Q: 11: Error. 
X:  2, Y:  9, Q:  3: Error. 
X:  3, Y:  0, Q:  9: Error. 
X:  4, Y:  1, Q:  5: Error. 
X:  5, Y: 10, Q:  4: Error. 
X:  6, Y:  2, Q:  2: OK. 
X:  7, Y: 11, Q:  3: Error. 
X:  8, Y:  3, Q:  5: Error. 
X:  9, Y:  8, Q: 15: Error. 
X: 10, Y:  5, Q:  1: Error. 
X: 11, Y: 13, Q:  8: Error. 
X: 12, Y:  4, Q:  1: Error. 
X: 13, Y: 14, Q:  1: Error. 
X: 14, Y:  7, Q:  3: Error. 
X: 15, Y: 15, Q:  3: Error. 


Simulating circuit failed.
Starting yosys synthesis...
| CircuitGraph | Total: 1234 | Linear:  750 | Non-linear:  190 | Registers:  120 | Mux:    0 | 
parse.py successful (2.31s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2s/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2s/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2s/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_LL2s/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
P: 12, Q: 15, p:  4, q: 14: Error. 
P:  6, Q:  7, p:  1, q:  1: Error. 
P:  9, Q: 14, p:  8, q: 11: Error. 
P:  0, Q:  4, p: 14, q:  4: Error. 
P:  1, Q: 13, p:  0, q:  5: Error. 
P: 10, Q:  5, p: 10, q:  8: Error. 
P:  2, Q:  8, p:  1, q: 10: Error. 
P: 11, Q:  3, p: 13, q:  1: Error. 
P:  3, Q: 11, p: 13, q: 13: Error. 
P:  8, Q:  2, p:  6, q:  3: Error. 
P:  5, Q: 10, p: 11, q: 13: Error. 
P: 13, Q:  1, p:  0, q: 14: Error. 
P:  4, Q:  0, p:  8, q:  6: Error. 
P: 14, Q:  9, p: 10, q:  1: Error. 
P:  7, Q:  6, p: 12, q:  9: Error. 
P: 15, Q: 12, p:  0, q:  2: Error. 


P: 12, Q: 15, p:  4, q: 14: Error. 
P:  6, Q:  7, p:  1, q:  1: Error. 
P:  9, Q: 14, p:  8, q: 11: Error. 
P:  0, Q:  4, p: 14, q:  4: Error. 
P:  1, Q: 13, p:  0, q:  5: Error. 
P: 10, Q:  5, p: 10, q:  8: Error. 
P:  2, Q:  8, p:  1, q: 10: Error. 
P: 11, Q:  3, p: 13, q:  1: Error. 
P:  3, Q: 11, p: 13, q: 13: Error. 
P:  8, Q:  2, p:  6, q:  3: Error. 
P:  5, Q: 10, p: 11, q: 13: Error. 
P: 13, Q:  1, p:  0, q: 14: Error. 
P:  4, Q:  0, p:  8, q:  6: Error. 
P: 14, Q:  9, p: 10, q:  1: Error. 
P:  7, Q:  6, p: 12, q:  9: Error. 
P: 15, Q: 12, p:  0, q:  2: Error. 


Simulating circuit failed.
Starting yosys synthesis...
| CircuitGraph | Total:  208 | Linear:   78 | Non-linear:   36 | Registers:   60 | Mux:    0 | 
parse.py successful (0.25s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_NF2/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_NF2/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_NF2/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_NF2/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X:  0, Y: 12, Q: 12: OK. 



 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)


-- Executing script file `/tmp/yosys_synth.ys' --

1. Executing GHDL.
Importing module TISbox.
Importing module stage.
Importing module reg_8.
Importing module permute.
Importing module componentfg.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \TISbox
Used module:     \permute
Used module:     \stage
Used module:         \componentfg
Used module:     \reg_8

2.1.2. Analyzing design hierarchy..
Top module:  \TISbox
Used module:     \permute
Used module:     \stage
Used module:         \componentfg
Used module:     \reg_8
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module componentfg.
Optimizing module permute.
Optimizing module reg_8.
Optimizing module stage.
Optimizing module TISbox.

2.3. Executing FLATTEN pass (flatten design).
Deleting now unused module componentfg.
Deleting now unused module permute.
Deleting now unused module reg_8.
Deleting now unused module stage.
<suppressed ~19 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..
Removed 0 unused cells and 69 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module TISbox...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISbox.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing FSM pass (extract and optimize FSM).

2.8.1. Executing FSM_DETECT pass (finding FSMs in design).

2.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISbox.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing WREDUCE pass (reducing word size of cells).

2.11. Executing PEEPOPT pass (run peephole optimizers).

2.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TISbox:
  created 0 $alu and 0 $macc cells.

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISbox.
Performed a total of 0 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.15.6. Executing OPT_DFF pass (perform DFF optimizations).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.15.9. Finished OPT passes. (There is nothing left to do.)

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.18.3. Executing OPT_DFF pass (perform DFF optimizations).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TISbox..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TISbox.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_DFF pass (perform DFF optimizations).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~298 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TISbox.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TISbox'.
Removed a total of 0 cells.

2.22.3. Executing OPT_DFF pass (perform DFF optimizations).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TISbox..

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \TISbox

2.23.2. Analyzing design hierarchy..
Top module:  \TISbox
Removed 0 unused modules.

2.24. Printing statistics.

=== TISbox ===

   Number of wires:                344
   Number of wire bits:           1331
   Number of public wires:         152
   Number of public wire bits:    1139
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                288
     $_DFF_P_                       72
     $_NOT_                         72
     $_OR_                          72
     $_XOR_                         72

2.25. Executing CHECK pass (checking for obvious problems).
Checking module TISbox...
Found and reported 0 problems.

3. Executing TECHMAP pass (map to technology primitives).

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

4. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

5. Executing Verilog backend.

5.1. Executing BMUXMAP pass.

5.2. Executing DEMUXMAP pass.
Dumping module `\TISbox'.

6. Executing JSON backend.

End of script. Logfile hash: 5adf2f04bc, CPU: user 0.23s system 0.07s, MEM: 25.12 MB peak
Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os)
Time spent: 20% 12x opt_expr (0 sec), 19% 12x opt_clean (0 sec), ...
| CircuitGraph | Total:  318 | Linear:   72 | Non-linear:   72 | Registers:   72 | Mux:    0 | 
parse.py successful (0.01s)
1: Running verilator on given netlist
['verilator', '--trace', '--trace-underscore', '--compiler', 'clang', '-Wno-UNOPTFLAT', '-Wno-LITENDIAN', '-cc', '/home/lucien/git/coco-alma/examples/skinny_sbox_TI1/tmp/circuit.v']


2: Compiling verilated netlist library
make: Entering directory '/home/lucien/git/coco-alma/examples/skinny_sbox_TI1/tmp/obj_dir'
perl /home/lucien/Downloads/oss-cad-suite/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vcircuit.cpp Vcircuit___024root__DepSet_ha3d1ef69__0.cpp Vcircuit__Trace__0.cpp Vcircuit___024root__Slow.cpp Vcircuit___024root__DepSet_ha3d1ef69__0__Slow.cpp Vcircuit__Syms.cpp Vcircuit__Trace__0__Slow.cpp > Vcircuit__ALL.cpp
echo "" > Vcircuit__ALL.verilator_deplist.tmp
clang++  -I.  -MMD -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include -I/home/lucien/Downloads/oss-cad-suite/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=1 -DVM_TRACE_FST=0 -DVM_TRACE_VCD=1 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow      -std=gnu++14 -Os -c -o Vcircuit__ALL.o Vcircuit__ALL.cpp
Archive ar -rcs Vcircuit__ALL.a Vcircuit__ALL.o
rm Vcircuit__ALL.verilator_deplist.tmp
make: Leaving directory '/home/lucien/git/coco-alma/examples/skinny_sbox_TI1/tmp/obj_dir'


./tmp/circuit
['clang++', '-Wall', '-fno-diagnostics-color', '-I./tmp/obj_dir', '-I/home/lucien/git/coco-alma/templates/', '-I/home/lucien/Downloads/oss-cad-suite/share/verilator/include', '/home/lucien/git/coco-alma/examples/skinny_sbox_TI1/verilator_tb.cpp', './tmp/obj_dir/Vcircuit__ALL.a', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated.cpp', '/home/lucien/Downloads/oss-cad-suite/share/verilator/include/verilated_vcd_c.cpp', '-o', './tmp/circuit']
3: Compiling provided verilator testbench


4: Simulating circuit and generating VCD
X: 00, Y: 65, Q: 65, Q0: 19, Q1: 6b, OK. 


bash: gensh.sh: No such file or directory
bash: run_prep.sh: No such file or directory
